// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`authenticate when the grantType is any other value throws an InvalidGrantType error 1`] = `[InvalidGrantType: Invalid grantType 'invalid'. Please check the API's configuration. Allowed values are 'authorization_code', 'client_credentials']`;

exports[`fetchAuthDetails when the setupId used when connecting doesn't match the setupId sent by the user in the request throws an InconsistentSetupId error 1`] = `[InconsistentSetupId: The provided setupId does not match the setupId used when connecting. Please reconnect using this setupId, or retry this call with the setupId corresponding to the authId]`;

exports[`fetchAuthDetails when the token has NOT expired returns the details from the auth credentials 1`] = `
Object {
  "accessToken": "test-access-token",
  "callbackParams": undefined,
  "clientId": "test-oauth-cient-id",
  "clientSecret": "test-client-secret",
  "connectParams": Object {
    "connect": "connect-param",
  },
  "expiresIn": 30,
  "idToken": "test-id-token",
  "idTokenJwt": undefined,
  "refreshToken": "test-refresh-token",
  "tokenResponse": undefined,
  "updatedAt": 1546300800000,
}
`;

exports[`fetchAuthDetails when the token has NOT expired returns the details from the auth credentials 2`] = `
[MockFunction] {
  "calls": Array [
    Array [
      Object {
        "authId": "test-authId",
        "buid": "test-buid",
        "clientId": "test-env-id",
        "servicesTableName": "test-services-table",
      },
    ],
  ],
  "results": Array [
    Object {
      "isThrow": false,
      "value": Promise {},
    },
  ],
}
`;

exports[`fetchAuthDetails when the token has expired refreshes the token using the auth credentials and setup details 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      Object {
        "clientId": "ClientID",
        "clientSecret": "clientSecret",
        "idToken": "abc",
        "refreshToken": "abc",
        "tokenURL": "https://auth22.example.com/token",
      },
    ],
  ],
  "results": Array [
    Object {
      "isThrow": false,
      "value": Object {
        "accessToken": "new-access-token",
        "decodedResponse": Object {
          "body": Object {
            "new": "data",
          },
        },
      },
    },
  ],
}
`;

exports[`fetchAuthDetails when the token has expired refreshes the token using the auth credentials and setup details 2`] = `
Object {
  "accessToken": "new-access-token",
  "callbackParams": Object {},
  "clientId": "clientId",
  "clientSecret": "ClientSecret",
  "connectParams": Object {},
  "expiresIn": 42,
  "idToken": "new-id-token",
  "idTokenJwt": undefined,
  "refreshToken": "new-refresh-token",
  "tokenResponse": Object {
    "body": Object {
      "new": "data",
    },
  },
  "updatedAt": 1546300770000,
}
`;

exports[`fetchAuthDetails when the token has expired when there is no refresh token when the grant type is Client Credentials gets a new token using the client credentials 1`] = `[MockFunction]`;

exports[`fetchAuthDetails when the token has expired when there is no refresh token when the grant type is Client Credentials gets a new token using the client credentials 2`] = `
Object {
  "accessToken": "new-access-token",
  "callbackParams": Object {},
  "clientId": "clientId",
  "clientSecret": "ClientSecret",
  "connectParams": Object {},
  "expiresIn": 42,
  "idToken": "new-id-token",
  "idTokenJwt": undefined,
  "refreshToken": "new-refresh-token",
  "tokenResponse": Object {
    "body": Object {
      "new": "data",
    },
  },
  "updatedAt": 1546300770000,
}
`;

exports[`fetchAuthDetails when the token has expired when there is no refresh token when the grant type is NOT Client Credentials raises an AccessTokenExpired error 1`] = `
[AccessTokenExpired: The access token associated with your Auth Id has expired and token refreshing is not supported for this API. Please reconnect to obtain a new access token.

Consult the API provider's documentation to determine whether refresh tokens can be enabled for this API]
`;

exports[`fetchAuthDetails when the token never expires returns the details from the auth credentials 1`] = `
Object {
  "accessToken": "test-access-token",
  "callbackParams": undefined,
  "clientId": "test-oauth-cient-id",
  "clientSecret": "test-client-secret",
  "connectParams": Object {
    "connect": "connect-param",
  },
  "expiresIn": 0,
  "idToken": "test-id-token",
  "idTokenJwt": undefined,
  "refreshToken": "test-refresh-token",
  "tokenResponse": undefined,
  "updatedAt": 1546300800000,
}
`;

exports[`fetchAuthDetails when the token never expires returns the details from the auth credentials 2`] = `
[MockFunction] {
  "calls": Array [
    Array [
      Object {
        "authId": "test-authId",
        "buid": "test-buid",
        "clientId": "test-env-id",
        "servicesTableName": "test-services-table",
      },
    ],
  ],
  "results": Array [
    Object {
      "isThrow": false,
      "value": Promise {},
    },
  ],
}
`;
